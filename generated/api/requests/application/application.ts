/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApplicationResponse,
  CreateApplicationRequest,
  GetApiV1ApplicationParams,
  ListApplicationResponse,
  UpdateApplicationRequest
} from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getApiV1ApplicationId = (
  id: string,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ApplicationResponse>(
    { url: `/api/v1/Application/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetApiV1ApplicationIdQueryKey = (id: string) => {
  return [`/api/v1/Application/${id}`] as const;
};

export const getGetApiV1ApplicationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ApplicationId>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ApplicationId>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ApplicationIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ApplicationId>>> = ({ signal }) =>
    getApiV1ApplicationId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ApplicationId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1ApplicationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ApplicationId>>
>;
export type GetApiV1ApplicationIdQueryError = unknown;

export function useGetApiV1ApplicationId<
  TData = Awaited<ReturnType<typeof getApiV1ApplicationId>>,
  TError = unknown
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ApplicationId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ApplicationId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ApplicationId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1ApplicationId<
  TData = Awaited<ReturnType<typeof getApiV1ApplicationId>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ApplicationId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ApplicationId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ApplicationId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1ApplicationId<
  TData = Awaited<ReturnType<typeof getApiV1ApplicationId>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ApplicationId>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1ApplicationId<
  TData = Awaited<ReturnType<typeof getApiV1ApplicationId>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ApplicationId>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1ApplicationIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1ApplicationId = (
  id: string,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<void>({ url: `/api/v1/Application/${id}`, method: 'DELETE' }, options);
};

export const getDeleteApiV1ApplicationIdMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ApplicationId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ApplicationId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteApiV1ApplicationId'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ApplicationId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ApplicationId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ApplicationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ApplicationId>>
>;

export type DeleteApiV1ApplicationIdMutationError = unknown;

export const useDeleteApiV1ApplicationId = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ApplicationId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ApplicationId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ApplicationIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiV1Application = (
  createApplicationRequest: CreateApplicationRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ApplicationResponse>(
    {
      url: `/api/v1/Application`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createApplicationRequest,
      signal
    },
    options
  );
};

export const getPostApiV1ApplicationMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Application>>,
    TError,
    { data: CreateApplicationRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Application>>,
  TError,
  { data: CreateApplicationRequest },
  TContext
> => {
  const mutationKey = ['postApiV1Application'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Application>>,
    { data: CreateApplicationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Application(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Application>>
>;
export type PostApiV1ApplicationMutationBody = CreateApplicationRequest;
export type PostApiV1ApplicationMutationError = unknown;

export const usePostApiV1Application = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Application>>,
    TError,
    { data: CreateApplicationRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Application>>,
  TError,
  { data: CreateApplicationRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1ApplicationMutationOptions(options);

  return useMutation(mutationOptions);
};
export const putApiV1Application = (
  updateApplicationRequest: UpdateApplicationRequest,
  options?: SecondParameter<typeof getInstance>
) => {
  return getInstance<ApplicationResponse>(
    {
      url: `/api/v1/Application`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateApplicationRequest
    },
    options
  );
};

export const getPutApiV1ApplicationMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Application>>,
    TError,
    { data: UpdateApplicationRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Application>>,
  TError,
  { data: UpdateApplicationRequest },
  TContext
> => {
  const mutationKey = ['putApiV1Application'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Application>>,
    { data: UpdateApplicationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Application(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Application>>
>;
export type PutApiV1ApplicationMutationBody = UpdateApplicationRequest;
export type PutApiV1ApplicationMutationError = unknown;

export const usePutApiV1Application = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Application>>,
    TError,
    { data: UpdateApplicationRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Application>>,
  TError,
  { data: UpdateApplicationRequest },
  TContext
> => {
  const mutationOptions = getPutApiV1ApplicationMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiV1Application = (
  params?: GetApiV1ApplicationParams,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ListApplicationResponse>(
    { url: `/api/v1/Application`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiV1ApplicationQueryKey = (params?: GetApiV1ApplicationParams) => {
  return [`/api/v1/Application`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Application>>,
  TError = unknown
>(
  params?: GetApiV1ApplicationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Application>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ApplicationQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Application>>> = ({ signal }) =>
    getApiV1Application(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Application>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1ApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Application>>
>;
export type GetApiV1ApplicationQueryError = unknown;

export function useGetApiV1Application<
  TData = Awaited<ReturnType<typeof getApiV1Application>>,
  TError = unknown
>(
  params: undefined | GetApiV1ApplicationParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Application>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Application>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Application>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1Application<
  TData = Awaited<ReturnType<typeof getApiV1Application>>,
  TError = unknown
>(
  params?: GetApiV1ApplicationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Application>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Application>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Application>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1Application<
  TData = Awaited<ReturnType<typeof getApiV1Application>>,
  TError = unknown
>(
  params?: GetApiV1ApplicationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Application>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1Application<
  TData = Awaited<ReturnType<typeof getApiV1Application>>,
  TError = unknown
>(
  params?: GetApiV1ApplicationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Application>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1ApplicationQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
