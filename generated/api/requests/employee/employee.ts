/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type { CreateEmployeeRequest, CreateEmployeeResponse } from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiV1Employee = (
  createEmployeeRequest: CreateEmployeeRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CreateEmployeeResponse>(
    {
      url: `/api/v1/Employee`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createEmployeeRequest,
      signal
    },
    options
  );
};

export const getPostApiV1EmployeeMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Employee>>,
    TError,
    { data: CreateEmployeeRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Employee>>,
  TError,
  { data: CreateEmployeeRequest },
  TContext
> => {
  const mutationKey = ['postApiV1Employee'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Employee>>,
    { data: CreateEmployeeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Employee(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1EmployeeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Employee>>
>;
export type PostApiV1EmployeeMutationBody = CreateEmployeeRequest;
export type PostApiV1EmployeeMutationError = unknown;

export const usePostApiV1Employee = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Employee>>,
    TError,
    { data: CreateEmployeeRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Employee>>,
  TError,
  { data: CreateEmployeeRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1EmployeeMutationOptions(options);

  return useMutation(mutationOptions);
};
