import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';

import type {
  CalculateRequest,
  CalculateResponse,
  CreateProductRequest,
  GetApiV1ProductParams,
  ProductDto
} from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiV1Product = (
  createProductRequest: CreateProductRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<void>(
    {
      url: `/api/v1/Product`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createProductRequest,
      signal
    },
    options
  );
};

export const getPostApiV1ProductMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Product>>,
    TError,
    { data: CreateProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Product>>,
  TError,
  { data: CreateProductRequest },
  TContext
> => {
  const mutationKey = ['postApiV1Product'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Product>>,
    { data: CreateProductRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Product(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Product>>
>;
export type PostApiV1ProductMutationBody = CreateProductRequest;
export type PostApiV1ProductMutationError = unknown;

export const usePostApiV1Product = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Product>>,
    TError,
    { data: CreateProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Product>>,
  TError,
  { data: CreateProductRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1ProductMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiV1Product = (
  params?: GetApiV1ProductParams,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ProductDto[]>(
    { url: `/api/v1/Product`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiV1ProductQueryKey = (params?: GetApiV1ProductParams) => {
  return [`/api/v1/Product`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ProductQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Product>>,
  TError = unknown
>(
  params?: GetApiV1ProductParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ProductQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Product>>> = ({ signal }) =>
    getApiV1Product(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Product>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1ProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Product>>>;
export type GetApiV1ProductQueryError = unknown;

export function useGetApiV1Product<
  TData = Awaited<ReturnType<typeof getApiV1Product>>,
  TError = unknown
>(
  params: GetApiV1ProductParams | undefined,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1Product<
  TData = Awaited<ReturnType<typeof getApiV1Product>>,
  TError = unknown
>(
  params?: GetApiV1ProductParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Product>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Product>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1Product<
  TData = Awaited<ReturnType<typeof getApiV1Product>>,
  TError = unknown
>(
  params?: GetApiV1ProductParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1Product<
  TData = Awaited<ReturnType<typeof getApiV1Product>>,
  TError = unknown
>(
  params?: GetApiV1ProductParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Product>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1ProductQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ProductCode = (
  code: string,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ProductDto>(
    { url: `/api/v1/Product/${code}`, method: 'GET', signal },
    options
  );
};

export const getGetApiV1ProductCodeQueryKey = (code: string) => {
  return [`/api/v1/Product/${code}`] as const;
};

export const getGetApiV1ProductCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ProductCode>>,
  TError = unknown
>(
  code: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ProductCodeQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1ProductCode>>> = ({ signal }) =>
    getApiV1ProductCode(code, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ProductCode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1ProductCodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ProductCode>>
>;
export type GetApiV1ProductCodeQueryError = unknown;

export function useGetApiV1ProductCode<
  TData = Awaited<ReturnType<typeof getApiV1ProductCode>>,
  TError = unknown
>(
  code: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductCode>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductCode>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductCode>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1ProductCode<
  TData = Awaited<ReturnType<typeof getApiV1ProductCode>>,
  TError = unknown
>(
  code: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductCode>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ProductCode>>,
          TError,
          Awaited<ReturnType<typeof getApiV1ProductCode>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1ProductCode<
  TData = Awaited<ReturnType<typeof getApiV1ProductCode>>,
  TError = unknown
>(
  code: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1ProductCode<
  TData = Awaited<ReturnType<typeof getApiV1ProductCode>>,
  TError = unknown
>(
  code: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1ProductCode>>, TError, TData>
    >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1ProductCodeQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1ProductCalculate = (
  calculateRequest: CalculateRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CalculateResponse>(
    {
      url: `/api/v1/Product/calculate`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: calculateRequest,
      signal
    },
    options
  );
};

export const getPostApiV1ProductCalculateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ProductCalculate>>,
    TError,
    { data: CalculateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ProductCalculate>>,
  TError,
  { data: CalculateRequest },
  TContext
> => {
  const mutationKey = ['postApiV1ProductCalculate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ProductCalculate>>,
    { data: CalculateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1ProductCalculate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ProductCalculateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ProductCalculate>>
>;
export type PostApiV1ProductCalculateMutationBody = CalculateRequest;
export type PostApiV1ProductCalculateMutationError = unknown;

export const usePostApiV1ProductCalculate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ProductCalculate>>,
    TError,
    { data: CalculateRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ProductCalculate>>,
  TError,
  { data: CalculateRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1ProductCalculateMutationOptions(options);

  return useMutation(mutationOptions);
};
