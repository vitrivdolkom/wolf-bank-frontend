/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  DepositResponse,
  PayCreditResponse,
  PaymentModel,
  WithdrawResponse
} from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiV1PaymentBankAccountIdDeposit = (
  bankAccountId: string,
  paymentModel: PaymentModel,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<DepositResponse>(
    {
      url: `/api/v1/Payment/${bankAccountId}/deposit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: paymentModel,
      signal
    },
    options
  );
};

export const getPostApiV1PaymentBankAccountIdDepositMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>,
    TError,
    { bankAccountId: string; data: PaymentModel },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>,
  TError,
  { bankAccountId: string; data: PaymentModel },
  TContext
> => {
  const mutationKey = ['postApiV1PaymentBankAccountIdDeposit'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>,
    { bankAccountId: string; data: PaymentModel }
  > = (props) => {
    const { bankAccountId, data } = props ?? {};

    return postApiV1PaymentBankAccountIdDeposit(bankAccountId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PaymentBankAccountIdDepositMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>
>;
export type PostApiV1PaymentBankAccountIdDepositMutationBody = PaymentModel;
export type PostApiV1PaymentBankAccountIdDepositMutationError = unknown;

export const usePostApiV1PaymentBankAccountIdDeposit = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>,
    TError,
    { bankAccountId: string; data: PaymentModel },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdDeposit>>,
  TError,
  { bankAccountId: string; data: PaymentModel },
  TContext
> => {
  const mutationOptions = getPostApiV1PaymentBankAccountIdDepositMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiV1PaymentBankAccountIdWithdraw = (
  bankAccountId: string,
  paymentModel: PaymentModel,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<WithdrawResponse>(
    {
      url: `/api/v1/Payment/${bankAccountId}/withdraw`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: paymentModel,
      signal
    },
    options
  );
};

export const getPostApiV1PaymentBankAccountIdWithdrawMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>,
    TError,
    { bankAccountId: string; data: PaymentModel },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>,
  TError,
  { bankAccountId: string; data: PaymentModel },
  TContext
> => {
  const mutationKey = ['postApiV1PaymentBankAccountIdWithdraw'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>,
    { bankAccountId: string; data: PaymentModel }
  > = (props) => {
    const { bankAccountId, data } = props ?? {};

    return postApiV1PaymentBankAccountIdWithdraw(bankAccountId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PaymentBankAccountIdWithdrawMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>
>;
export type PostApiV1PaymentBankAccountIdWithdrawMutationBody = PaymentModel;
export type PostApiV1PaymentBankAccountIdWithdrawMutationError = unknown;

export const usePostApiV1PaymentBankAccountIdWithdraw = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>,
    TError,
    { bankAccountId: string; data: PaymentModel },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1PaymentBankAccountIdWithdraw>>,
  TError,
  { bankAccountId: string; data: PaymentModel },
  TContext
> => {
  const mutationOptions = getPostApiV1PaymentBankAccountIdWithdrawMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiV1PaymentAgreementIdCredit = (
  agreementId: string,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<PayCreditResponse>(
    { url: `/api/v1/Payment/${agreementId}/credit`, method: 'POST', signal },
    options
  );
};

export const getPostApiV1PaymentAgreementIdCreditMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>,
    TError,
    { agreementId: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>,
  TError,
  { agreementId: string },
  TContext
> => {
  const mutationKey = ['postApiV1PaymentAgreementIdCredit'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>,
    { agreementId: string }
  > = (props) => {
    const { agreementId } = props ?? {};

    return postApiV1PaymentAgreementIdCredit(agreementId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PaymentAgreementIdCreditMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>
>;

export type PostApiV1PaymentAgreementIdCreditMutationError = unknown;

export const usePostApiV1PaymentAgreementIdCredit = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>,
    TError,
    { agreementId: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1PaymentAgreementIdCredit>>,
  TError,
  { agreementId: string },
  TContext
> => {
  const mutationOptions = getPostApiV1PaymentAgreementIdCreditMutationOptions(options);

  return useMutation(mutationOptions);
};
