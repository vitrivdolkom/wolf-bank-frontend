/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  LoginRequest,
  LoginResponse,
  LogoutResponse,
  RegisterRequest,
  RegisterResponse,
  RevalidateResponse
} from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiV1AuthLogin = (
  loginRequest: LoginRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<LoginResponse>(
    {
      url: `/api/v1/Auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequest,
      signal
    },
    options
  );
};

export const getPostApiV1AuthLoginMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ['postApiV1AuthLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1AuthLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AuthLogin>>
>;
export type PostApiV1AuthLoginMutationBody = LoginRequest;
export type PostApiV1AuthLoginMutationError = unknown;

export const usePostApiV1AuthLogin = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1AuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiV1AuthRegister = (
  registerRequest: RegisterRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<RegisterResponse>(
    {
      url: `/api/v1/Auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerRequest,
      signal
    },
    options
  );
};

export const getPostApiV1AuthRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ['postApiV1AuthRegister'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AuthRegister>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1AuthRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>
>;
export type PostApiV1AuthRegisterMutationBody = RegisterRequest;
export type PostApiV1AuthRegisterMutationError = unknown;

export const usePostApiV1AuthRegister = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1AuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1AuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postApiV1AuthLogout = (
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<LogoutResponse>(
    { url: `/api/v1/Auth/logout`, method: 'POST', signal },
    options
  );
};

export const getPostApiV1AuthLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<Awaited<ReturnType<typeof postApiV1AuthLogout>>, TError, void, TContext> => {
  const mutationKey = ['postApiV1AuthLogout'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1AuthLogout>>,
    void
  > = () => {
    return postApiV1AuthLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1AuthLogout>>
>;

export type PostApiV1AuthLogoutMutationError = unknown;

export const usePostApiV1AuthLogout = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1AuthLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<Awaited<ReturnType<typeof postApiV1AuthLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostApiV1AuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiV1AuthRefresh = (
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<RevalidateResponse>(
    { url: `/api/v1/Auth/refresh`, method: 'GET', signal },
    options
  );
};

export const getGetApiV1AuthRefreshQueryKey = () => {
  return [`/api/v1/Auth/refresh`] as const;
};

export const getGetApiV1AuthRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthRefresh>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1AuthRefreshQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1AuthRefresh>>> = ({ signal }) =>
    getApiV1AuthRefresh(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1AuthRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AuthRefresh>>
>;
export type GetApiV1AuthRefreshQueryError = unknown;

export function useGetApiV1AuthRefresh<
  TData = Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
  TError = unknown
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthRefresh>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
        TError,
        Awaited<ReturnType<typeof getApiV1AuthRefresh>>
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof getInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1AuthRefresh<
  TData = Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthRefresh>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
        TError,
        Awaited<ReturnType<typeof getApiV1AuthRefresh>>
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1AuthRefresh<
  TData = Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthRefresh>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1AuthRefresh<
  TData = Awaited<ReturnType<typeof getApiV1AuthRefresh>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthRefresh>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1AuthRefreshQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
