/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * WolfBankGateway
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BanUserResponse,
  CreateUserRequest,
  CreateUserResponse,
  GetApiV1UserParams,
  GetProfileResponse,
  ListUsersResponse
} from '../../models';

import { getInstance } from '../../../../src/utils/api/instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postApiV1UserUserIdBan = (
  userId: string,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<BanUserResponse>(
    { url: `/api/v1/User/${userId}/ban`, method: 'POST', signal },
    options
  );
};

export const getPostApiV1UserUserIdBanMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UserUserIdBan>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UserUserIdBan>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationKey = ['postApiV1UserUserIdBan'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UserUserIdBan>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return postApiV1UserUserIdBan(userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UserUserIdBanMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UserUserIdBan>>
>;

export type PostApiV1UserUserIdBanMutationError = unknown;

export const usePostApiV1UserUserIdBan = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UserUserIdBan>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1UserUserIdBan>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getPostApiV1UserUserIdBanMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiV1User = (
  params?: GetApiV1UserParams,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<ListUsersResponse>(
    { url: `/api/v1/User`, method: 'GET', params, signal },
    options
  );
};

export const getGetApiV1UserQueryKey = (params?: GetApiV1UserParams) => {
  return [`/api/v1/User`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1UserQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1User>>,
  TError = unknown
>(
  params?: GetApiV1UserParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1User>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1User>>> = ({ signal }) =>
    getApiV1User(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1User>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UserQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1User>>>;
export type GetApiV1UserQueryError = unknown;

export function useGetApiV1User<TData = Awaited<ReturnType<typeof getApiV1User>>, TError = unknown>(
  params: undefined | GetApiV1UserParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1User>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1User>>,
          TError,
          Awaited<ReturnType<typeof getApiV1User>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1User<TData = Awaited<ReturnType<typeof getApiV1User>>, TError = unknown>(
  params?: GetApiV1UserParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1User>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1User>>,
          TError,
          Awaited<ReturnType<typeof getApiV1User>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1User<TData = Awaited<ReturnType<typeof getApiV1User>>, TError = unknown>(
  params?: GetApiV1UserParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1User>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1User<TData = Awaited<ReturnType<typeof getApiV1User>>, TError = unknown>(
  params?: GetApiV1UserParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1User>>, TError, TData>>;
    request?: SecondParameter<typeof getInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1UserQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1User = (
  createUserRequest: CreateUserRequest,
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<CreateUserResponse>(
    {
      url: `/api/v1/User`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserRequest,
      signal
    },
    options
  );
};

export const getPostApiV1UserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1User>>,
    TError,
    { data: CreateUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1User>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationKey = ['postApiV1User'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1User>>,
    { data: CreateUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1User(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UserMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1User>>>;
export type PostApiV1UserMutationBody = CreateUserRequest;
export type PostApiV1UserMutationError = unknown;

export const usePostApiV1User = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1User>>,
    TError,
    { data: CreateUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof getInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1User>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1UserMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiV1UserProfile = (
  options?: SecondParameter<typeof getInstance>,
  signal?: AbortSignal
) => {
  return getInstance<GetProfileResponse>(
    { url: `/api/v1/User/profile`, method: 'GET', signal },
    options
  );
};

export const getGetApiV1UserProfileQueryKey = () => {
  return [`/api/v1/User/profile`] as const;
};

export const getGetApiV1UserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UserProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UserProfile>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UserProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UserProfile>>> = ({ signal }) =>
    getApiV1UserProfile(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiV1UserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UserProfile>>
>;
export type GetApiV1UserProfileQueryError = unknown;

export function useGetApiV1UserProfile<
  TData = Awaited<ReturnType<typeof getApiV1UserProfile>>,
  TError = unknown
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UserProfile>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UserProfile>>,
        TError,
        Awaited<ReturnType<typeof getApiV1UserProfile>>
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof getInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1UserProfile<
  TData = Awaited<ReturnType<typeof getApiV1UserProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UserProfile>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UserProfile>>,
        TError,
        Awaited<ReturnType<typeof getApiV1UserProfile>>
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiV1UserProfile<
  TData = Awaited<ReturnType<typeof getApiV1UserProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UserProfile>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiV1UserProfile<
  TData = Awaited<ReturnType<typeof getApiV1UserProfile>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1UserProfile>>, TError, TData>>;
  request?: SecondParameter<typeof getInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1UserProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
